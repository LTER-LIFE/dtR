// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// intPP_mixed
NumericMatrix intPP_mixed(NumericVector zmax, NumericMatrix kd, NumericMatrix par, NumericMatrix alfa, NumericMatrix eopt, NumericMatrix pmax, NumericMatrix height);
RcppExport SEXP _dtPP_intPP_mixed(SEXP zmaxSEXP, SEXP kdSEXP, SEXP parSEXP, SEXP alfaSEXP, SEXP eoptSEXP, SEXP pmaxSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type zmax(zmaxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type kd(kdSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type par(parSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type alfa(alfaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type eopt(eoptSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pmax(pmaxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type height(heightSEXP);
    rcpp_result_gen = Rcpp::wrap(intPP_mixed(zmax, kd, par, alfa, eopt, pmax, height));
    return rcpp_result_gen;
END_RCPP
}
// rad_bot
NumericMatrix rad_bot(NumericVector zmax, NumericMatrix kd, NumericMatrix par, NumericMatrix height);
RcppExport SEXP _dtPP_rad_bot(SEXP zmaxSEXP, SEXP kdSEXP, SEXP parSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type zmax(zmaxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type kd(kdSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type par(parSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type height(heightSEXP);
    rcpp_result_gen = Rcpp::wrap(rad_bot(zmax, kd, par, height));
    return rcpp_result_gen;
END_RCPP
}
// intPP_exp
NumericMatrix intPP_exp(NumericVector zmax, NumericVector kd, NumericVector pMud, NumericMatrix par, NumericMatrix alfa, NumericMatrix eopt, NumericMatrix pmax);
RcppExport SEXP _dtPP_intPP_exp(SEXP zmaxSEXP, SEXP kdSEXP, SEXP pMudSEXP, SEXP parSEXP, SEXP alfaSEXP, SEXP eoptSEXP, SEXP pmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type zmax(zmaxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kd(kdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pMud(pMudSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type par(parSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type alfa(alfaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type eopt(eoptSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pmax(pmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(intPP_exp(zmax, kd, pMud, par, alfa, eopt, pmax));
    return rcpp_result_gen;
END_RCPP
}
// intPP_log
NumericMatrix intPP_log(NumericVector zmax, NumericVector kd, NumericVector zn, NumericVector zsd, NumericMatrix par, NumericMatrix alfa, NumericMatrix eopt, NumericMatrix pmax);
RcppExport SEXP _dtPP_intPP_log(SEXP zmaxSEXP, SEXP kdSEXP, SEXP znSEXP, SEXP zsdSEXP, SEXP parSEXP, SEXP alfaSEXP, SEXP eoptSEXP, SEXP pmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type zmax(zmaxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kd(kdSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zn(znSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zsd(zsdSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type par(parSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type alfa(alfaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type eopt(eoptSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type pmax(pmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(intPP_log(zmax, kd, zn, zsd, par, alfa, eopt, pmax));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dtPP_intPP_mixed", (DL_FUNC) &_dtPP_intPP_mixed, 7},
    {"_dtPP_rad_bot", (DL_FUNC) &_dtPP_rad_bot, 4},
    {"_dtPP_intPP_exp", (DL_FUNC) &_dtPP_intPP_exp, 7},
    {"_dtPP_intPP_log", (DL_FUNC) &_dtPP_intPP_log, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_dtPP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
